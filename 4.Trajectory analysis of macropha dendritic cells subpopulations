###########将macroDC重新聚类看分化轨迹#######################
load("E:/muma/GSE151177/data.input_neg.Rdata")
load("E:/muma/GSE151177/data.input_pos.Rdata")
load("E:/muma/GSE151177/scissormeata.Rdata")
load("E:/muma/GSE151177/scRNA4.Rdata")

library(Seurat)
scRNA_NK<-scRNA4[, scRNA4$celltype %in% c( "NKs" )]
#scRNA_pos=scRNA4[,colnames(scRNA4) %in% colnames(data.input_pos)]
#scRNA_macroDC<-scRNA_pos[, scRNA_pos$celltype %in% c( "macro/DC" )]
scRNA_macroDC<-scRNA4[, scRNA4$celltype %in% c( "macro/DC" )]
sce=scRNA_macroDC
sce <- NormalizeData(sce, normalization.method = "LogNormalize", scale.factor = 1e4) 
sce <- FindVariableFeatures(sce, selection.method = 'vst', nfeatures = 2000)
sce <- ScaleData(sce, vars.to.regress = "percent.mt")
sce <- RunPCA(sce, features = VariableFeatures(object = sce)) 

sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2 )
# Look at cluster IDs of the first 5 cells
head(Idents(sce), 5)
table(sce$seurat_clusters) 
sce <- RunUMAP(sce, dims = 1:10)
DimPlot(sce, reduction = 'umap')

genes_to_check = c("ALDOA","H6PD")
DotPlot(sce, group.by = 'seurat_clusters',
        
        features = unique(genes_to_check),cols = c("blue","grey", "red")) + RotatedAxis()+ #翻转
  theme(panel.grid = element_blank(), 
        axis.text.x=element_text(angle = 45, hjust = 0.5,vjust=0.5))+ #轴标签
  labs(x=NULL,y=NULL) + 
  guides(size = guide_legend("Percent Expression") )+ #legend
  scale_color_gradientn(colours = c('#330066','#336699','#FFCC33',"red")) #颜色

p1=DimPlot(sce, reduction = 'umap', group.by = 'seurat_clusters',
           label = TRUE, pt.size = 0.5) + NoLegend()
p2=DotPlot(sce, group.by = 'seurat_clusters',
           features = unique(genes_to_check)) + RotatedAxis()
library(patchwork)
p1+p2
new.cluster.ids <- c("0"="ALDOA+cluster", 
                     "1"="H6PD+cluster", 
                     "2"="H6PD+ALDOA+cluster", 
                     "3"="H6PD+cluster", 
                     "4"="H6PD+cluster" ,
                     "5" ="H6PD-ALDOA-cluster",
                     "6"="H6PD-ALDOA-cluster",
                     "7"="H6PD-ALDOA-cluster"
                     )
table(sce@meta.data$seurat_clusters)

sce2 <- RenameIdents(sce, new.cluster.ids)                        
sce2$celltype <-sce2@active.ident
table(sce2$celltype)
library(ggsci)
DimPlot(sce2, label = T,pt.size = 1,group.by = "celltype")+ scale_color_igv()
library(export)
graph2pdf(file="E:/muma/GSE151177/macroDC亚群celltype_UMAP.pdf",width=7,height=7)
DotPlot(sce2, group.by = 'celltype',
        
        features = unique(genes_to_check),cols = c("blue","grey", "red")) + RotatedAxis()+ #翻转
  theme(panel.grid = element_blank(), 
        axis.text.x=element_text(angle = 45, hjust = 0.5,vjust=0.5))+ #轴标签
  labs(x=NULL,y=NULL) + 
  guides(size = guide_legend("Percent Expression") )+ #legend
  scale_color_gradientn(colours = c('#330066','#336699','#FFCC33',"red")) #颜色
library(export)
graph2pdf(file="E:/muma/GSE151177/macroDC亚群celltype_定群气泡图.pdf",width=7,height=7)

library(export)
save(sce2,file = 'E:/muma/GSE151177/sce.macroDC.subset.Rdata')
#直接用CytoTRACE分析看一下这几个细胞它推断的起点
sce_subExp <- as.matrix(sce2[["RNA"]]$counts)
results <- CytoTRACE(sce_subExp,ncores = 1)
sce_subphenot <- sce2$celltype
sce_subphenot <- as.character(sce_subphenot)
names(sce_subphenot) <- rownames(sce2@meta.data)
sce_subemb <- sce2@reductions[["umap"]]@cell.embeddings

plotCytoTRACE(results, phenotype = sce_subphenot, emb = sce_subemb, outputDir = 'E:/muma/GSE151177/')
library(Seurat)
library(scater)
library(scran)
library(dplyr)
library(Matrix)
library(cowplot)
library(ggplot2)
library(harmony)
library(monocle)
library(CytoTRACE)
library(scibetR)
SingleCell <- sce2
allCells <- names(Idents(SingleCell))
#Idents(SingleCell) <- "cell_Subtype"
allType <- levels(Idents(SingleCell))
#提取表型信息--细胞信息
expr_matrix <- as(as.matrix(SingleCell[["RNA"]]$counts), 'sparseMatrix')
#提取表型信息到p_data(phenotype_data)里面
p_data <- SingleCell@meta.data
#提取基因信息
f_data <- data.frame(data.frame(gene_short_name = row.names(SingleCell), row.names = row.names(SingleCell)))
#expr_matrix的行数与f_data的行数相同(gene number),expr_matrix的列数与p_data的行数相同(cell number)
################构建CDS对象######################
pd <- new('AnnotatedDataFrame', data = p_data)
fd <- new('AnnotatedDataFrame', data = f_data)
#将p_data和f_data从data.frame转换AnnotateDataFrame对象
monocle_cds <- newCellDataSet(expr_matrix,
                              phenoData = pd,
                              featureData = fd,
                              lowerDetectionLimit = 0.5,
                              expressionFamily = negbinomial.size())
########################第三步：以高可变基因作的表达趋势进行轨迹构建#################
monocle_cds <- estimateSizeFactors(monocle_cds)
monocle_cds <- estimateDispersions(monocle_cds)
monocle_cds <- detectGenes(monocle_cds, min_expr = 0.1) #在fData(cds)种添加一列num_cells_expressed
print(head(fData(monocle_cds)))
expressed_genes <- row.names(subset(fData(monocle_cds), num_cells_expressed >= 1)) #过滤掉在小于10个细胞种表达的基因
#输入差异或高变基因
Idents(SingleCell) <- allType
diff <- FindAllMarkers(SingleCell,logfc.threshold = 0.25,min.pct = 0.2)
#diff <- subset(diff,!grepl(pattern = 'RP[LS]',H6PD))
#diff <- subset(diff,!grepl(pattern = 'MT-',H6PD))
head(diff)
#轨迹构建基因可视化
ordergene <- row.names(diff) #选择用于排序的基因数目一般在2000左右比较合适
monocle_cds <- setOrderingFilter(monocle_cds, ordergene)
#关键步骤：使用setOrderingFilter将它嵌入cds对象，后续的分析会使用这一list
#然后将基因会被存储在cds@featureData@data[["use_for_ordering"]]中，可通过table(cds@featureData@data[["use_for_ordering"]])查看
plot_ordering_genes(monocle_cds)
#使用反向图嵌入（DDRTree）算法对数据进行降维
monocle_cds <- reduceDimension(monocle_cds, max_components = 2,
                               method = "DDRTree")
#根据order gene的表达趋势，将细胞排序并完成轨迹构建
monocle_cds <- orderCells(monocle_cds)
save(monocle_cds,file="E:/muma/GSE151177/monocle_cds.Rdata")
#使用root_state参数可以设置拟时序轴的根。如monocle_cds <- orderCells(monocle_cds, root_state = 5)
###########第四步：使用cytoTrace进行细胞亚群分化潜能打分########################################3

expr <- as.matrix(SingleCell[["RNA"]]$counts)
results <- CytoTRACE(mat = expr, enableFast = F)
pheno <- SingleCell@meta.data$celltype
pheno <- as.character(pheno)
names(pheno) <- SingleCell[["RNA"]]$counts@Dimnames[[2]]
options(repr.plot.height = 7.5, repr.plot.width = 16)
plotCytoGenes(results, numOfGenes = 10)
plotCytoTRACE(results, phenotype = pheno)
##########第五步：将分化潜能得分加入分化轨迹，并可视化分化轨迹###################
monocle_cds@phenoData@data$CytoTrace <- results$CytoTRACE
#以Pseudotime值上色，是基于细胞基因表达信息计算的概率，表示时间的先后
plot_cell_trajectory(monocle_cds, color_by = "CytoTrace", size = 1, show_backbone = TRUE)
monocle_meta <- data.frame(t(monocle_cds@reducedDimS), 
                           monocle_cds$Pseudotime, 
                           monocle_cds$State, 
                           monocle_cds$celltype)
colnames(monocle_meta) <- c("C1", "C2", "Pseudotime", "State", "celltype")

phenot1 <- monocle_meta$celltype
phenot1 <- as.character(phenot1)
names(phenot1) <- rownames(monocle_meta)
emb_monocle <- monocle_meta[,1:2]
plotCytoTRACE(results, phenotype = pheno, emb = emb_monocle)
####################注意#################################
#先运行下面三个代码，观察State后再进行root_state的选择
monocle_cds <- orderCells(monocle_cds, root_state = 2)
#########################################################
#以Pseudotime值上色，是基于细胞基因表达信息计算的概率，表示时间的先后
plot_cell_trajectory(monocle_cds, color_by = "Pseudotime", size = 1, show_backbone = TRUE)
#以细胞类型上色
plot_cell_trajectory(monocle_cds, color_by = "celltype", size = 1, show_backbone = TRUE)
#以细胞状态上色
plot_cell_trajectory(monocle_cds, color_by = "State", size = 1, show_backbone = TRUE)
#State是monocle算出来的，与输入用于轨迹学习的基因有关，分叉和顶点之间或者顶点和顶点之间是一个state
#与发育轨迹时间先后没有关系，与细胞类型也不完全相关
#以癌症类型上色
#plot_cell_trajectory(monocle_cds, color_by = "TumorType", size = 1, show_backbone = TRUE)
#按照seurat分群排序细胞
plot_cell_trajectory(monocle_cds, color_by = "seurat_clusters")
#以细胞状态拆分轨迹图，以便查看每个状态的位置
plot_cell_trajectory(monocle_cds, color_by = "celltype") + facet_wrap("~celltype", nrow = 2)
###############slingshot################
library(slingshot)
library(Seurat)
library(SingleCellExperiment)
library(RColorBrewer)
#加载单细胞数据集
#seurat转换为SingleCellExperiment
sce3 <- as.SingleCellExperiment(sce2)
sc <- slingshot(sce3, clusterLabels = "celltype", reducedDim = "UMAP")
sc
#class: SingleCellExperiment 
#dim: 21087 5000 
#metadata(0):
#assays(2): counts logcounts
#rownames(21087): Sox17 Mrpl15 ... 1700109K24Rik Gm10556
#rowData names(0):
#colnames(5000): AAGGTTCAGACAGACC-1_1_1 AAGTCTGAGGATGGTC-1_1_1 ...
#  TTGGAACCACCACGTG.4_32 TTTATGCGTCTGATTG.4_32
#colData names(11): nCount_RNA nFeature_RNA ... slingPseudotime_3
#  slingPseudotime_4
#reducedDimNames(3): PCA HARMONY UMAP
#mainExpName: RNA
#altExpNames(0):
summary(sc$slingPseudotime_1)
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
#  0.155   7.934  12.553  13.726  19.180  27.999    1559 
lin1 <- getLineages(sc, 
                    clusterLabels = "celltype", 
                    #start.clus = 'H6PD+cluster',#可指定起始细胞簇
                    #end.clus=c("Comp","Col15a1","Ccl19", "Coch", "Cxcl12", "Fbln1", "Bmp4", "Npnt", "Hhip"),#可指定终点细胞簇
                    reducedDim = "PCA")
plot(reducedDims(sc)$UMAP,col = brewer.pal(10,'Paired')[sce2$celltype],pch=16,asp=1)
lines(SlingshotDataSet(lin1), lwd=2,col = 'black',type = 'lineages')
crv1 <- getCurves(lin1)
plot(reducedDims(sc)$PCA,col = brewer.pal(10,'Paired')[sce2$celltype],pch=16,asp=1)
lines(SlingshotDataSet(crv1), lwd = 3, col = 'black')
graph2pdf(file="E:/muma/GSE151177/3亚群macroDCslingshot轨迹图.pdf",width=7,height=7)
###########################使用Seurat和Velocyto估算RNA速率#########################
library(Seurat)
library(velocyto.R)
library(SeuratWrappers)
load('E:/muma/GSE151177/sce.macroDC.subset.Rdata')
bm=sce2
bm <- RunVelocity(object = bm, deltaT = 1, kCells = 25, fit.quantile = 0.02)
ident.colors <- (scales::hue_pal())(n = length(x = levels(x = bm)))
names(x = ident.colors) <- levels(x = bm)
cell.colors <- ident.colors[Idents(object = bm)]
names(x = cell.colors) <- colnames(x = bm)
show.velocity.on.embedding.cor(emb = Embeddings(object = bm, reduction = "umap"), vel = Tool(object = bm, 
                                                                                             slot = "RunVelocity"), n = 200, scale = "sqrt", cell.colors = ac(x = cell.colors, alpha = 0.5), 
                               cex = 0.8, arrow.scale = 3, show.grid.flow = TRUE, min.grid.cell.mass = 0.5, grid.n = 40, arrow.lwd = 1, 
                               do.par = FALSE, cell.border.alpha = 0.1)
#################做一下PASI堆叠图#####################333
row.names(scissormeata)=scissormeata$Row.names
meta.data2=merge(scRNA_macroDC@meta.data,scissormeata,by="row.names")
data=as.data.frame(scRNA_macroDC@meta.data$orig.ident)
#data=as.data.frame(meta.data2$orig.ident2.y)

colnames(data)="patient"
data$type=sce2$celltype
#data$scissor=meta.data2$scissor
data$PASI=gsub("Psoriasis01","29",data$patient)
data$PASI=gsub("Psoriasis02","40.5",data$PASI)
data$PASI=gsub("Psoriasis03","18.6",data$PASI)

data$PASI=gsub("Psoriasis04","13",data$PASI)
data$PASI=gsub("Psoriasis05","7.8",data$PASI)
data$PASI=gsub("Psoriasis06","8.4",data$PASI)
data$PASI=gsub("Psoriasis07","12.2",data$PASI)
data$PASI=gsub("Psoriasis08","9.6",data$PASI)
data$PASI=gsub("Psoriasis09","6.8",data$PASI)
data$PASI=gsub("Psoriasis10","6",data$PASI)
data$PASI=gsub("Psoriasis11","9.8",data$PASI)
data$PASI=gsub("Psoriasis12","7.4",data$PASI)
data$PASI=gsub("Psoriasis13","6.2",data$PASI)
data$PASI=gsub("F","",data$PASI)
data$PASI=as.numeric(data$PASI)
data$PASIgroup=ifelse(data$PASI>10,"high","low")
data$gender=gsub("Psoriasis01","M",data$patient)
data$gender=gsub("Psoriasis02","M",data$gender)
data$gender=gsub("Psoriasis03","F",data$gender)

data$gender=gsub("Psoriasis04","F",data$gender)
data$gender=gsub("Psoriasis05","M",data$gender)
data$gender=gsub("Psoriasis06","F",data$gender)
data$gender=gsub("Psoriasis07","M",data$gender)
data$gender=gsub("Psoriasis08","M",data$gender)
data$gender=gsub("Psoriasis09","F",data$gender)
data$gender=gsub("Psoriasis10","M",data$gender)
data$gender=gsub("Psoriasis11","M",data$gender)
data$gender=gsub("Psoriasis12","F",data$gender)
data$gender=gsub("Psoriasis13","M",data$gender)
data$gender=gsub("FF","F",data$gender)
data$age=gsub("Psoriasis01","51",data$patient)
data$age=gsub("Psoriasis02","24",data$age)
data$age=gsub("Psoriasis03","32",data$age)

data$age=gsub("Psoriasis04","54",data$age)
data$age=gsub("Psoriasis05","64",data$age)
data$age=gsub("Psoriasis06","60",data$age)
data$age=gsub("Psoriasis07","36",data$age)
data$age=gsub("Psoriasis08","42",data$age)
data$age=gsub("Psoriasis09","47",data$age)
data$age=gsub("Psoriasis10","40",data$age)
data$age=gsub("Psoriasis11","40",data$age)
data$age=gsub("Psoriasis12","48",data$age)
data$age=gsub("Psoriasis13","45",data$age)
data$age=gsub("F","",data$age)
data$age=as.numeric(data$age)
data$agegroup=ifelse(data$age>=45,"old","young")

genderF=data[data$gender==c("F"),]
genderF=genderF$type
genderF=as.data.frame(genderF)
colnames(genderF)="occupation"
library(lessR)
#mydata$occupation
PieChart(occupation, data = genderF,
         main = NULL) 
graph2pdf(file="E:/muma/GSE151177/甜甜圈图_genderF.pdf",width=7,height=7)
genderM=data[data$gender==c("M"),]
genderM=genderM$type
genderM=as.data.frame(genderM)
colnames(genderM)="occupation"
library(lessR)
mydata$occupation
PieChart(occupation, data = genderM,
         main = NULL) 
graph2pdf(file="E:/muma/GSE151177/甜甜圈图_genderM.pdf",width=7,height=7)

PASIlow=data[data$PASIgroup==c("low"),]
PASIlow=PASIlow$type
PASIlow=as.data.frame(PASIlow)
colnames(PASIlow)="occupation"
library(lessR)
mydata$occupation
PieChart(occupation, data = PASIlow,
         main = NULL) 
graph2pdf(file="E:/muma/GSE151177/甜甜圈图_PASIlow.pdf",width=7,height=7)

PASIhigh=data[data$PASIgroup==c("high"),]
PASIhigh=PASIhigh$type
PASIhigh=as.data.frame(PASIhigh)
colnames(PASIhigh)="occupation"
library(lessR)
mydata$occupation
PieChart(occupation, data = PASIhigh,
         main = NULL) 
graph2pdf(file="E:/muma/GSE151177/甜甜圈图_PASIhigh.pdf",width=7,height=7)
Ageold=data[data$agegroup==c("old"),]
Ageold=Ageold$type
Ageold=as.data.frame(Ageold)
colnames(Ageold)="occupation"
library(lessR)
mydata$occupation
PieChart(occupation, data = Ageold,
         main = NULL) 
graph2pdf(file="E:/muma/GSE151177/甜甜圈图_Ageold.pdf",width=7,height=7)

Ageyoung=data[data$agegroup==c("young"),]
Ageyoung=Ageyoung$type
Ageyoung=as.data.frame(Ageyoung)
colnames(Ageyoung)="occupation"
library(lessR)
mydata$occupation
PieChart(occupation, data = Ageyoung,
         main = NULL) 
graph2pdf(file="E:/muma/GSE151177/甜甜圈图_Ageyoung.pdf",width=7,height=7)
scissor_pos=data[data$scissor==c("pos"),]
scissor_pos=scissor_pos$type
scissor_pos=as.data.frame(scissor_pos)
colnames(scissor_pos)="occupation"
library(lessR)
#mydata$occupation
PieChart(occupation, data = scissor_pos,
         main = NULL) 
graph2pdf(file="E:/muma/GSE151177/甜甜圈图_scissor_pos.pdf",width=7,height=7)
scissor_neg=data[data$scissor==c("neg"),]
scissor_neg=scissor_neg$type
scissor_neg=as.data.frame(scissor_neg)
colnames(scissor_neg)="occupation"
library(lessR)
#mydata$occupation
PieChart(occupation, data = scissor_neg,
         main = NULL) 
graph2pdf(file="E:/muma/GSE151177/甜甜圈图_scissor_neg.pdf",width=7,height=7)

#############
ALDOA=data[data$type==c("ALDOA+cluster"),]
ALDOAPASI=ALDOA$PASIgroup
ALDOAPASI=as.data.frame(ALDOAPASI)
colnames(ALDOAPASI)="occupation"
library(lessR)
mydata$occupation
PieChart(occupation, data = ALDOAPASI,
         main = NULL) 
graph2pdf(file="E:/muma/GSE151177/甜甜圈图_ALDOAPASI.pdf",width=7,height=7)
H6PD=data[data$type==c("H6PD+cluster"),]
H6PDPASI=H6PD$PASIgroup
H6PDPASI=as.data.frame(H6PDPASI)
colnames(H6PDPASI)="occupation"
library(lessR)
mydata$occupation
PieChart(occupation, data = H6PDPASI,
         main = NULL) 
graph2pdf(file="E:/muma/GSE151177/甜甜圈图_H6PDPASI.pdf",width=7,height=7)
